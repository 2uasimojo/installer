package manifests

import (
	"fmt"
	"path/filepath"

	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/yaml"

	apicfgv1 "github.com/openshift/api/config/v1"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
)

var imageDigestMirrorSetFilenameFormat = "image-digest-mirror-set-%s.yaml"

// ImageDigestMirrorSet generates the image-digest-mirror-set.yaml files.
type ImageDigestMirrorSet struct {
	FileList []*asset.File
}

var _ asset.WritableAsset = (*ImageDigestMirrorSet)(nil)

// Name returns a human-friendly name for the asset.
func (*ImageDigestMirrorSet) Name() string {
	return "Image Digest Mirror Set"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*ImageDigestMirrorSet) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
	}
}

// Generate generates the ImageDigestMirrorSet config and its CR.
func (p *ImageDigestMirrorSet) Generate(dependencies asset.Parents) error {
	installconfig := &installconfig.InstallConfig{}
	dependencies.Get(installconfig)

	padFormat := fmt.Sprintf("%%0%dd", len(fmt.Sprintf("%d", len(installconfig.Config.ImageDigestSources))))

	policies := make([]*apicfgv1.ImageDigestMirrorSet, 0)
	for gidx, group := range installconfig.Config.ImageDigestSources {
		mirrors := []apicfgv1.ImageMirror{}
		for _, m := range group.Mirrors {
			mirrors = append(mirrors, apicfgv1.ImageMirror(m))
		}
		policies = append(policies, &apicfgv1.ImageDigestMirrorSet{
			TypeMeta: metav1.TypeMeta{
				APIVersion: apicfgv1.SchemeGroupVersion.String(),
				Kind:       "ImageDigestMirrorSet",
			},
			ObjectMeta: metav1.ObjectMeta{
				Name: fmt.Sprintf("image-digest-mirror-%s", fmt.Sprintf(padFormat, gidx)),
				// not namespaced
			},
			Spec: apicfgv1.ImageDigestMirrorSetSpec{
				ImageDigestMirrors: []apicfgv1.ImageDigestMirrors{{Source: group.Source, Mirrors: mirrors}},
			},
		})
	}

	p.FileList = make([]*asset.File, len(policies))
	for i, policy := range policies {
		policyData, err := yaml.Marshal(policy)
		if err != nil {
			return errors.Wrapf(err, "failed to marshal ImageDigestMirrorSet")
		}
		padded := fmt.Sprintf(padFormat, i)
		p.FileList[i] = &asset.File{
			Filename: filepath.Join(manifestDir, fmt.Sprintf(imageDigestMirrorSetFilenameFormat, padded)),
			Data:     policyData,
		}
	}
	return nil
}

// Files returns the files generated by the asset.
func (p *ImageDigestMirrorSet) Files() []*asset.File {
	return p.FileList
}

// Load loads the already-rendered files back from disk.
func (p *ImageDigestMirrorSet) Load(f asset.FileFetcher) (bool, error) {
	return false, nil
}
