package lbconfig

import (
	"fmt"
	"net"
	"os"
	"path/filepath"
	"strings"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/yaml"

	"github.com/openshift/installer/cmd/openshift-install/command"
	"github.com/openshift/installer/pkg/asset"
)

var (
	// ConfigName is the name of the load balancer config file.
	ConfigName = "openshift-lb-config.yaml"

	// ConfigPath is the path to the load balancer config file.
	ConfigPath = filepath.Join("openshift", ConfigName)
)

// Config generates the lbConfigForDNS ConfigMap.
type Config struct {
	File *asset.File
}

var _ asset.WritableAsset = (*Config)(nil)

// Name returns a human friendly name for the asset.
func (*Config) Name() string {
	return "OpenShift Load Balancer Config"
}

// Dependencies returns all the dependencies directly needed to generate
// the asset.
func (*Config) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate generates the openshift-install ConfigMap.
func (i *Config) Generate(dependencies asset.Parents) error {
	cm, err := CreateLBConfigMap("openshift-lb-config", "", "")
	if err != nil {
		return err
	}

	i.File = &asset.File{
		Filename: ConfigPath,
		Data:     []byte(cm),
	}

	return nil
}

// Files returns the files generated by the asset.
func (i *Config) Files() []*asset.File {
	if i.File != nil {
		return []*asset.File{i.File}
	}
	return []*asset.File{}
}

// Load loads the already-rendered files back from disk.
func (i *Config) Load(f asset.FileFetcher) (bool, error) {
	file, err := f.FetchByName(ConfigPath)
	if os.IsNotExist(err) {
		return false, nil
	} else if err != nil {
		return false, err
	}
	i.File = file
	return true, nil
}

// CreateLBConfigMap creates a ConfigMap containing API and APi-Int
// LB configuration. Returns an error if marshalling to YAML fails.
func CreateLBConfigMap(name, lbIntDNS, lbDNS string) (string, error) {
	if lbIntDNS == "" && lbDNS == "" {
		return "", nil
	}

	cm := &corev1.ConfigMap{
		TypeMeta: metav1.TypeMeta{
			APIVersion: corev1.SchemeGroupVersion.String(),
			Kind:       "ConfigMap",
		},
		ObjectMeta: metav1.ObjectMeta{
			Namespace: "openshift-infra",
			Name:      name,
		},
		// The data below contains placeholders that will later be filled in after the ip addresses are known
		Data: map[string]string{
			"internal-api-lb-dns-name": lbIntDNS,
			"external-api-lb-dns-name": lbDNS,
		},
	}

	cmData, err := yaml.Marshal(cm)
	if err != nil {
		return "", fmt.Errorf("failed to create %q ConfigMap: %w", name, err)
	}

	return string(cmData), nil
}

// ParseDNSDataFromConfig parses the ip addresses and DNS names from the config map.
func ParseDNSDataFromConfig(external, internal bool) ([]string, []net.IP, error) {
	searchStrs := []string{}
	if external {
		searchStrs = append(searchStrs, "external-api-lb-dns-name")
	}
	if internal {
		searchStrs = append(searchStrs, "internal-api-lb-dns-name")
	}

	ipAddresses := []net.IP{}
	dnsNames := []string{}

	lbConfigPath := fmt.Sprintf("%s/%s", command.RootOpts.Dir, ConfigName)
	if _, err := os.Stat(lbConfigPath); err != nil {
		if !os.IsNotExist(err) {
			return dnsNames, ipAddresses, fmt.Errorf("failed to find %s: %w", lbConfigPath, err)
		}
	} else {
		lbConfigContents, err := os.ReadFile(lbConfigPath)
		if err != nil {
			return dnsNames, ipAddresses, fmt.Errorf("failed to read %s: %w", lbConfigPath, err)
		}

		var data map[string]interface{}
		err = yaml.Unmarshal(lbConfigContents, &data)
		if err != nil {
			return dnsNames, ipAddresses, fmt.Errorf("failed to create ConfigMap: %w", err)
		}
		if internalData, ok := data["data"]; ok {
			for _, entry := range searchStrs {
				if externalLBData, ok := internalData.(map[string]interface{})[entry]; ok {
					dnsData := strings.Split(externalLBData.(string), ",")

					for _, networkData := range dnsData {
						parsedIP := net.ParseIP(networkData)
						if parsedIP != nil {
							ipAddresses = append(ipAddresses, parsedIP)
						} else {
							// assume the data is a dns entry
							dnsNames = append(dnsNames, networkData)
						}
					}
				}
			}
		}
	}

	return dnsNames, ipAddresses, nil
}
