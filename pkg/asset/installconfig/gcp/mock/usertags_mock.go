// Code generated by MockGen. DO NOT EDIT.
// Source: ./usertags.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gcp "github.com/openshift/installer/pkg/types/gcp"
	cloudresourcemanager "google.golang.org/api/cloudresourcemanager/v3"
	sets "k8s.io/apimachinery/pkg/util/sets"
)

// MockTagManager is a mock of TagManager interface.
type MockTagManager struct {
	ctrl     *gomock.Controller
	recorder *MockTagManagerMockRecorder
}

// MockTagManagerMockRecorder is the mock recorder for MockTagManager.
type MockTagManagerMockRecorder struct {
	mock *MockTagManager
}

// NewMockTagManager creates a new mock instance.
func NewMockTagManager(ctrl *gomock.Controller) *MockTagManager {
	mock := &MockTagManager{ctrl: ctrl}
	mock.recorder = &MockTagManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagManager) EXPECT() *MockTagManagerMockRecorder {
	return m.recorder
}

// GetNamespacedTagValue mocks base method.
func (m *MockTagManager) GetNamespacedTagValue(ctx context.Context, tagNamespacedName string) (*cloudresourcemanager.TagValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespacedTagValue", ctx, tagNamespacedName)
	ret0, _ := ret[0].(*cloudresourcemanager.TagValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespacedTagValue indicates an expected call of GetNamespacedTagValue.
func (mr *MockTagManagerMockRecorder) GetNamespacedTagValue(ctx, tagNamespacedName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespacedTagValue", reflect.TypeOf((*MockTagManager)(nil).GetNamespacedTagValue), ctx, tagNamespacedName)
}

// GetProjectTags mocks base method.
func (m *MockTagManager) GetProjectTags(ctx context.Context, projectID string) (sets.Set[string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectTags", ctx, projectID)
	ret0, _ := ret[0].(sets.Set[string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectTags indicates an expected call of GetProjectTags.
func (mr *MockTagManagerMockRecorder) GetProjectTags(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectTags", reflect.TypeOf((*MockTagManager)(nil).GetProjectTags), ctx, projectID)
}

// GetUserTags mocks base method.
func (m *MockTagManager) GetUserTags(ctx context.Context, projectID string, userTags []gcp.UserTag) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTags", ctx, projectID, userTags)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTags indicates an expected call of GetUserTags.
func (mr *MockTagManagerMockRecorder) GetUserTags(ctx, projectID, userTags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTags", reflect.TypeOf((*MockTagManager)(nil).GetUserTags), ctx, projectID, userTags)
}
